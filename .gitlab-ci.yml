# ------------
# -- STAGES --
# ------------
stages:
  - build
  - deploy
  - postdeploy

variables:
  # Dry run is for builds-only mode, no uploading/deploying/notifying, helpful when experimenting with pipelines
  CFX_DRY_RUN: 'false'
  CFX_RELEASE_BUILD: 'false'
  CFX_CLONE_ROOT: $CI_BUILDS_DIR\$CI_PROJECT_PATH_SLUG\$CI_COMMIT_REF_SLUG

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && ($CI_COMMIT_BRANCH == 'master' || $CI_COMMIT_BRANCH == 'beta' || $CI_COMMIT_BRANCH == 'production')
      variables:
        CFX_RELEASE_BUILD: 'true'
    # never run pipelines for tags
    - if: $CI_COMMIT_TAG
      when: never
    # never run pipelines for MRs
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    # otherwise, always run pipelines
    - when: always

# helper for jobs that are only meant to be run for releases
.only_for_release:
  rules:
    - if: $CFX_RELEASE_BUILD == 'true'
      when: on_success
    - when: never

# helper for jobs that are only meant to be run on master branch
.only_for_master:
  rules:
    - if: $CFX_RELEASE_BUILD == 'true' && $CI_COMMIT_BRANCH == 'master'
      when: on_success
    - when: never

# helper for windows builds of clients and server
.base_build_windows:
  stage: build
  tags:
    - windows
  variables:
    # archives are heavier this way, but much faster to pack/unpack
    FF_USE_FASTZIP: "true"
    CACHE_COMPRESSION_LEVEL: "fastest"
  cache:
    key: $CI_JOB_NAME--$CI_COMMIT_REF_SLUG

# -------------------
# -- CLIENT BUILDS --
# -------------------
.base_build_client:
  extends: [.base_build_windows]
  script:
    - ".\\code\\tools\\ci\\build_client.ps1"
  artifacts:
    paths:
      - caches
      - ext/native-doc-gen/natives_cfx.json
    expire_in: 1 month
  cache:
    paths:
      # Build files (bin, build, etc.)
      - .build-cache
      - code/tools/build/prebuild_run.txt
      # IDL tool generated files
      - code/tools/idl/xpidl/__pycache__
      - code/tools/idl/xpidl/xpidllex.py
      - code/tools/idl/xpidl/xpidlyacc.py
      # IDL generated files to avoid large recompilations
      - code/client/citicore/fxcore.h
      - code/client/citicore/fxIBase.h
      - code/components/citizen-scripting-core/include/fxScripting.h
      # Launcher delay list
      - code/client/launcher/DelayList.h
      # Versioning files
      - code/shared/citversion.h
      - code/shared/launcher_version.h
      # native-doc-gen files
      - ext/native-doc-gen/node.exe
      # natives files
      - ext/natives/inp
      - ext/natives/out
      # ui files
      - ext/ui-build/data/.commit
      - ext/ui-build/data.zip
      - ext/ui-build/data_big.zip
      # Chromium tools precompiled python
      - vendor/chromium/**/*.pyc
      # V8 binaries
      - vendor/v8/**/*.dll

build_client:
  extends: [.base_build_client]
  variables:
    GIT_CLONE_PATH: $CFX_CLONE_ROOT\fivem
    CFX_PRODUCT_NAME: fivem
  tags:
    - release_fivem
    - windows
    - vs2022

build_client_rdr3:
  extends: [.base_build_client]
  variables:
    GIT_CLONE_PATH: $CFX_CLONE_ROOT\redm
    CFX_PRODUCT_NAME: redm
  tags:
    - release_redm
    - windows
    - vs2022

build_sdk:
  stage: build
  tags:
    - release_fivem
    - windows
  variables:
    GIT_CLONE_PATH: $CFX_CLONE_ROOT\fivem-sdk
  artifacts:
    paths:
      - caches
    expire_in: 1 month
  cache:
    key: $CI_JOB_NAME--$CI_COMMIT_REF_SLUG
    paths:
      - caches
  script:
    - ".\\code\\tools\\ci\\build_sdk.ps1"

# -------------------
# -- SERVER BUILDS --
# -------------------
.base_build_server:
  rules:
    - if: $CI_COMMIT_BRANCH && ($CI_COMMIT_BRANCH != 'beta' && $CI_COMMIT_BRANCH != 'production')
      when: always
    - when: never

build_server_windows:
  extends: [.base_build_windows, .base_build_server]
  tags:
    - release_fxserver
    - windows
    - vs2022
  variables:
    GIT_CLONE_PATH: $CFX_CLONE_ROOT\fxserver
    CFX_PRODUCT_NAME: fxserver
  script:
    - ".\\code\\tools\\ci\\build_server_windows.ps1"
  artifacts:
    paths:
      - out/server.zip
      - out/server.7z
    expire_in: 1 month
  cache:
    untracked: true

build_proot_linux:
  extends: [.base_build_server]
  stage: build
  tags:
    - linux
  image: mcr.microsoft.com/dotnet/sdk:6.0-alpine3.15
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    GIT_SUBMODULE_DEPTH: 3
    # workaround gitlab-ci-multi-runner#2148
    GIT_SSL_CAPATH: /etc/ssl/certs/
    DOCKER_TLS_CERTDIR: ""
  script: 
    - sh code/tools/ci/build_server_proot.sh
  artifacts:
    paths:
      - fx.tar.xz
    expire_in: 1 month

# -------------------
# -- CLIENT DEPLOY --
# -------------------
.base_deploy_client:
  stage: deploy
  tags:
    - windows
  script:
    - ".\\code\\tools\\ci\\deploy_client.ps1"
  cache:
    key: $CI_JOB_NAME--$CI_COMMIT_REF_SLUG
    paths:
      - .build-cache

.base_fivem_deploy:
  extends: [.base_deploy_client]
  variables:
    GIT_CLONE_PATH: $CFX_CLONE_ROOT\fivem-deploy
    CFX_PRODUCT_NAME: fivem
  needs:
    - job: build_client
      artifacts: true
    - job: build_sdk
      artifacts: true

.base_redm_deploy:
  extends: [.base_deploy_client]
  variables:
    GIT_CLONE_PATH: $CFX_CLONE_ROOT\redm-deploy
    CFX_PRODUCT_NAME: redm
  needs:
    - job: build_client_rdr3
      artifacts: true

# FiveM deployments
fivem_deploy_canary:
  extends: [.base_fivem_deploy]
  environment:
    name: canary
  rules:
    - if: $CFX_RELEASE_BUILD == 'true' && $CI_COMMIT_BRANCH == 'master'
      when: on_success
    - when: never

fivem_deploy_beta:
  extends: [.base_fivem_deploy]
  environment:
    name: beta
  rules:
    - if: $CFX_RELEASE_BUILD == 'true' && $CI_COMMIT_BRANCH == 'beta'
      when: on_success
    - when: never

fivem_deploy_production:
  extends: [.base_fivem_deploy]
  environment:
    name: production
  rules:
    - if: $CFX_RELEASE_BUILD == 'true' && $CI_COMMIT_BRANCH == 'production'
      when: on_success
    - when: never

fivem_deploy_specific:
  extends: [.base_fivem_deploy]
  environment:
    name: specific/$CI_COMMIT_BRANCH
  rules:
    - if: $CFX_RELEASE_BUILD == 'false' && $CI_COMMIT_BRANCH
      when: manual
      allow_failure: true
    - when: never

# RedM deployments
redm_deploy_canary:
  extends: [.base_redm_deploy]
  environment:
    name: canary
  rules:
    - if: $CFX_RELEASE_BUILD == 'true' && $CI_COMMIT_BRANCH == 'master'
      when: on_success
    - when: never

redm_deploy_beta:
  extends: [.base_redm_deploy]
  environment:
    name: beta
  rules:
    - if: $CFX_RELEASE_BUILD == 'true' && $CI_COMMIT_BRANCH == 'beta'
      when: on_success
    - when: never

redm_deploy_production:
  extends: [.base_redm_deploy]
  environment:
    name: production
  rules:
    - if: $CFX_RELEASE_BUILD == 'true' && $CI_COMMIT_BRANCH == 'production'
      when: on_success
    - when: never

redm_deploy_specific:
  extends: [.base_redm_deploy]
  environment:
    name: specific/$CI_COMMIT_BRANCH
  rules:
    - if: $CFX_RELEASE_BUILD == 'false' && $CI_COMMIT_BRANCH
      when: manual
      allow_failure: true
    - when: never

# -------------------
# -- ScRT PACKAGES --
# -------------------
typings_server:
  stage: deploy
  extends: [.only_for_master]
  needs:
    - job: build_server_windows
      artifacts: true
  image: node:alpine
  tags:
    - linux
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    GIT_SUBMODULE_DEPTH: 3
    # workaround gitlab-ci-multi-runner#2148
    GIT_SSL_CAPATH: /etc/ssl/certs/
  script:
    - sh ext/typings/server/build.sh
    
typings_client:
  stage: deploy
  extends: [.only_for_master]
  needs:
    - job: build_client
      artifacts: true
  tags:
    - windows
  script:
    - "cmd /c ext\\typings\\client\\build.bat"
    
nuget_client:
  stage: deploy
  extends: [.only_for_master]
  needs:
    - job: build_client
      artifacts: true
  tags:
    - windows
  script:
    - "cmd /c ext\\nuget\\client\\build.bat"
    
nuget_server:
  stage: deploy
  extends: [.only_for_master]
  needs:
    - job: build_server_windows
      artifacts: true
  tags:
    - windows
  script:
    - "cmd /c ext\\nuget\\server\\build.bat"

# --------------------
# -- UPLOAD REVIEWS --
# --------------------
.base_upload_review:
  stage: postdeploy
  extends: [.only_for_release]
  allow_failure: true
  script:
    - ".\\code\\tools\\ci\\upload_review.ps1"
  tags:
    - windows

fivem_upload_review:
  extends: [.base_upload_review]
  variables:
    GIT_CLONE_PATH: $CFX_CLONE_ROOT\fivem-review
  needs:
    - job: build_client
      artifacts: true

redm_upload_review:
  extends: [.base_upload_review]
  variables:
    GIT_CLONE_PATH: $CFX_CLONE_ROOT\redm-review
  needs:
    - job: build_client_rdr3
      artifacts: true
