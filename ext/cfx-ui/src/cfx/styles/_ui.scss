@use "sass:math";
@use "colors";

@mixin def($var, $value) {
  --#{$var}: #{$value};
}
@function use($var, $default: initial) {
  @return var(--#{$var}, $default);
}

@function color($name, $luminance: 'pure', $alpha: 1.0) {
  @if $luminance == 'pure' {
    @return rgba(var(--color-#{$name}), #{$alpha});
  }

  @return rgba(var(--color-#{$name}-#{$luminance}), #{$alpha});
}

@function offset($size: 'normal') {
  @return var(--offset-#{$size});
}

@function q($multiplier: 1) {
  @if $multiplier == 1 {
      @return var(--quant);
  }

  @return calc(var(--quant) * #{$multiplier});
}

@function control-height($size: 'normal') {
  @return var(--control-height-#{$size});
}

@function font-size($size: 'normal') {
  @return var(--font-size-#{$size});
}

@function font-weight($weight: 'normal') {
  @return var(--font-weight-#{$weight});
}

@function negative($cssValue) {
  @return calc(-1 * #{$cssValue});
}

@function border-radius($size: 'normal') {
  @return var(--border-radius-#{$size});
}

@function viewport-width($multiplier: 1.0) {
  @return calc((var(--width) - var(--offset-safezone) * 2) * #{$multiplier});
}
@function viewport-height($multiplier: 1.0) {
  @return calc((var(--height) - var(--offset-safezone) * 2) * #{$multiplier});
}

@mixin define-color($name, $color, $bg, $fg) {
  .cfx-color-#{$name} { color: $color }

  --color-#{$name}: #{colors.color-triplet($color)};
  --color-#{$name}-50:  #{colors.color-triplet(colors.lab-gradient-step($bg, $color, 1, 7))};
  --color-#{$name}-100: #{colors.color-triplet(colors.lab-gradient-step($bg, $color, 2, 7))};
  --color-#{$name}-200: #{colors.color-triplet(colors.lab-gradient-step($bg, $color, 3, 7))};
  --color-#{$name}-300: #{colors.color-triplet(colors.lab-gradient-step($bg, $color, 4, 7))};
  --color-#{$name}-400: #{colors.color-triplet(colors.lab-gradient-step($bg, $color, 5, 7))};
  --color-#{$name}-500: #{colors.color-triplet($color)};
  --color-#{$name}-600: #{colors.color-triplet(colors.lab-gradient-step($color, $fg, 1, 7))};
  --color-#{$name}-700: #{colors.color-triplet(colors.lab-gradient-step($color, $fg, 2, 7))};
  --color-#{$name}-800: #{colors.color-triplet(colors.lab-gradient-step($color, $fg, 3, 7))};
  --color-#{$name}-900: #{colors.color-triplet(colors.lab-gradient-step($color, $fg, 4, 7))};
  --color-#{$name}-950: #{colors.color-triplet(colors.lab-gradient-step($color, $fg, 5, 7))};
}
@mixin define-main-color($bg, $fg) {
  --color-main: #{colors.color-triplet($bg)};
  --color-main-50:  #{colors.color-triplet(colors.lab-gradient-step($bg, $fg, 1,  12))};
  --color-main-100: #{colors.color-triplet(colors.lab-gradient-step($bg, $fg, 2,  12))};
  --color-main-200: #{colors.color-triplet(colors.lab-gradient-step($bg, $fg, 3,  12))};
  --color-main-300: #{colors.color-triplet(colors.lab-gradient-step($bg, $fg, 4,  12))};
  --color-main-400: #{colors.color-triplet(colors.lab-gradient-step($bg, $fg, 5,  12))};
  --color-main-500: #{colors.color-triplet(colors.lab-gradient-step($bg, $fg, 6,  12))};
  --color-main-600: #{colors.color-triplet(colors.lab-gradient-step($bg, $fg, 7,  12))};
  --color-main-700: #{colors.color-triplet(colors.lab-gradient-step($bg, $fg, 8,  12))};
  --color-main-800: #{colors.color-triplet(colors.lab-gradient-step($bg, $fg, 9,  12))};
  --color-main-900: #{colors.color-triplet(colors.lab-gradient-step($bg, $fg, 10, 12))};
  --color-main-950: #{colors.color-triplet(colors.lab-gradient-step($bg, $fg, 11, 12))};
}
@mixin define-main-colors($bg, $fg, $overrides: ()) {
  $colors: map-merge((
    'primary': #f50551,
    'success': #01a370,
    'warning': #ffae00,
    'error': #ff2600,
    'teal': #007892,
    'aurum': #aa6f0d,
    'silver': #a5a5a5
  ), $overrides);

  @include define-main-color($bg, $fg);

  @each $colorName, $colorValue in $colors {
    @include define-color($colorName, $colorValue, $bg, $fg);
  }
}
@mixin define-color-token($name, $color) {
  --color-#{$name}: #{$color};
}
@function color-token($name, ) {
  @return var(--color-#{$name});
}


@mixin border-radius($size: 'normal') {
  border-radius: var(--border-radius-#{$size});
}

@mixin font-size($size: 'normal') {
  font-size: var(--font-size-#{$size});
}
@mixin font-family($family: 'primary') {
  font-family: var(--font-family-#{$family});
}
@mixin font-weight($weight: 'normal') {
  font-weight: var(--font-weight-#{$weight});
}
@mixin font-color($colorToken) {
  color: color-token($colorToken);
}

@mixin animated($props: 'all', $subClass: '&') {
  #{$subClass} {
    transition: #{$props} .2s ease;
  }

  &:hover {
    #{$subClass} {
      transition: none;
    }
  }
}

@mixin fake-backdrop-blur($topLayer: false, $topLayerBlend: false, $topLayerSize: false, $topLayerAttachement: false) {
  --_backdrop-color: var(--backdrop-color, transparent);
  --_backdrop-image-blur: var(--backdrop-image-blur, url(assets/images/bg2-blur.png));

  @if not $topLayer {
    $topLayer: linear-gradient(use('_backdrop-color'), use('_backdrop-color'));
  }

  @if not $topLayerBlend {
    $topLayerBlend: normal;
  }

  @if not $topLayerSize {
    $topLayerSize: cover;
  }

  @if not $topLayerAttachement {
    $topLayerAttachement: scroll;
  }

  background-color: use('_backdrop-color');
  background-image:
    $topLayer,
    linear-gradient(color-token('backdrop-shader'), color-token('backdrop-shader')),
    use('_backdrop-image-blur'),
    use('_backdrop-image-blur');
  background-blend-mode: $topLayerBlend, normal, overlay;
  background-size: $topLayerSize, cover, cover, cover;
  background-attachment: $topLayerAttachement, scroll, fixed, fixed;
}

@mixin offset-classes($prefix: 'offset', $property: 'gap') {
  &.#{$prefix}-none {
    #{$property}: 0;
  }
  &.#{$prefix}-thin {
    #{$property}: 2px;
  }
  &.#{$prefix}-xsmall {
    #{$property}: offset('xsmall');
  }
  &.#{$prefix}-small {
    #{$property}: offset('small');
  }
  &.#{$prefix}-normal {
    #{$property}: offset('normal');
  }
  &.#{$prefix}-large {
    #{$property}: offset('large');
  }
  &.#{$prefix}-xlarge {
    #{$property}: offset('xlarge');
  }
}
